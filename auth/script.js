// Cache cho rate limiting
const loginCache = new Map();
const RATE_LIMIT_WINDOW = 60000; // 1 ph√∫t
const MAX_ATTEMPTS = 3;

// Rate limiting function
function checkRateLimit(ip) {
    const now = Date.now();
    const attempts = loginCache.get(ip) || [];
    
    // X√≥a attempts c≈© h∆°n 1 ph√∫t
    const recentAttempts = attempts.filter(time => now - time < RATE_LIMIT_WINDOW);
    
    if (recentAttempts.length >= MAX_ATTEMPTS) {
        return false;
    }
    
    recentAttempts.push(now);
    loginCache.set(ip, recentAttempts);
    return true;
}

async function loginWithDiscord() {
    try {
        // Check rate limit
        const userIP = await getUserIP();
        if (!checkRateLimit(userIP)) {
            Swal.fire({
                icon: 'warning',
                title: 'Qu√° nhi·ªÅu l·∫ßn th·ª≠!',
                text: 'Vui l√≤ng ƒë·ª£i 1 ph√∫t tr∆∞·ªõc khi th·ª≠ l·∫°i',
                background: '#1a1a1a',
                color: '#fff',
                confirmButtonColor: '#5865f2'
            });
            return;
        }

        document.getElementById('loginSection').style.display = 'none';
        document.getElementById('loading').style.display = 'block';
        
        // L·∫•y config t·ª´ backend
        const configResponse = await fetch('/api/config');
        if (!configResponse.ok) {
            throw new Error('Kh√¥ng th·ªÉ l·∫•y config t·ª´ server');
        }
        
        const config = await configResponse.json();
        
        // T·∫°o Discord OAuth URL
        const params = new URLSearchParams({
            client_id: config.clientId,
            redirect_uri: config.redirectUri,
            response_type: 'code',
            scope: 'identify guilds.members.read'
        });
        
        const discordAuthUrl = `https://discord.com/oauth2/authorize?${params.toString()}`;
        
        console.log('Redirecting to:', discordAuthUrl);
        console.log('Config:', config);
        
        window.location.href = discordAuthUrl;
        
    } catch (error) {
        console.error('Login error:', error);
        showError('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn Discord. Vui l√≤ng th·ª≠ l·∫°i!');
    }
}

async function getUserIP() {
    try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
    } catch (error) {
        console.warn('Cannot get IP:', error);
        return 'unknown';
    }
}

// X·ª≠ l√Ω callback khi Discord redirect v·ªÅ
window.addEventListener('load', async () => {
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    const error = urlParams.get('error');
    const errorDescription = urlParams.get('error_description');
    
    // X·ª≠ l√Ω l·ªói t·ª´ Discord
    if (error) {
        let errorMessage = 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i';
        
        switch (error) {
            case 'access_denied':
                errorMessage = 'B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p';
                break;
            case 'invalid_request':
                errorMessage = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá';
                break;
            case 'unauthorized_client':
                errorMessage = '·ª®ng d·ª•ng kh√¥ng ƒë∆∞·ª£c ph√©p';
                break;
            case 'unsupported_response_type':
                errorMessage = 'L·ªói c·∫•u h√¨nh OAuth';
                break;
            default:
                errorMessage = errorDescription || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ Discord';
        }
        
        showError(errorMessage);
        // X√≥a error params kh·ªèi URL
        window.history.replaceState({}, document.title, window.location.pathname);
        return;
    }
    
    if (code) {
        await handleDiscordCallback(code);
    } else {
        // Check if user already logged in
        checkExistingLogin();
    }
});

async function handleDiscordCallback(code) {
    try {
        const userIP = await getUserIP();
        
        const response = await fetch('/api/auth', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ 
                code: code,
                ip: userIP 
            })
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
            showUserInfo(data.user);
            
            // Save login state
            localStorage.setItem('discordAuth', JSON.stringify({
                user: data.user,
                timestamp: Date.now()
            }));
            
            Swal.fire({
                icon: 'success',
                title: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng! üéâ',
                text: `Ch√†o m·ª´ng ${data.user.username}!`,
                background: '#1a1a1a',
                color: '#fff',
                confirmButtonColor: '#5865f2',
                timer: 3000,
                timerProgressBar: true
            });
            
        } else {
            // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p';
            
            if (data.message === 'User not in server') {
                errorMessage = 'T√†i kho·∫£n b·∫°n kh√¥ng t·ªìn t·∫°i trong server ch√∫ng t√¥i';
            } else if (data.message === 'Rate limited') {
                errorMessage = 'Qu√° nhi·ªÅu y√™u c·∫ßu, vui l√≤ng th·ª≠ l·∫°i sau';
            } else if (data.message === 'Invalid code') {
                errorMessage = 'M√£ x√°c th·ª±c kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n';
            } else if (data.message === 'Discord API error') {
                errorMessage = 'L·ªói k·∫øt n·ªëi ƒë·∫øn Discord, vui l√≤ng th·ª≠ l·∫°i';
            } else if (data.message) {
                errorMessage = data.message;
            }
            
            showError(errorMessage);
        }
        
    } catch (error) {
        console.error('Auth callback error:', error);
        showError('L·ªói k·∫øt n·ªëi server, vui l√≤ng th·ª≠ l·∫°i');
    }
    
    // X√≥a code kh·ªèi URL
    window.history.replaceState({}, document.title, window.location.pathname);
}

function checkExistingLogin() {
    const savedAuth = localStorage.getItem('discordAuth');
    if (savedAuth) {
        try {
            const authData = JSON.parse(savedAuth);
            const oneHour = 60 * 60 * 1000;
            
            // Check if login is still valid (1 hour)
            if (Date.now() - authData.timestamp < oneHour) {
                showUserInfo(authData.user);
                return;
            }
        } catch (error) {
            console.error('Error parsing saved auth:', error);
        }
        
        // Clear expired auth
        localStorage.removeItem('discordAuth');
    }
}

function showUserInfo(user) {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('loginSection').style.display = 'none';
    
    document.getElementById('userAvatar').src = user.avatar;
    document.getElementById('userName').textContent = user.username;
    document.getElementById('daysInfo').textContent = `${user.daysInServer} ng√†y trong server`;
    document.getElementById('userInfo').style.display = 'block';
    
    // Trigger auth event cho c√°c component kh√°c
    window.dispatchEvent(new CustomEvent('userAuthenticated', {
        detail: { user: user }
    }));
}

function showError(message) {
    document.getElementById('loading').style.display = 'none';
    document.getElementById('loginSection').style.display = 'block';
    
    Swal.fire({
        icon: 'error',
        title: 'L·ªói ƒëƒÉng nh·∫≠p! ‚ùå',
        text: message,
        background: '#1a1a1a',
        color: '#fff',
        confirmButtonColor: '#ed4245'
    });
}

function logout() {
    Swal.fire({
        title: 'ƒêƒÉng xu·∫•t?',
        text: 'B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#ed4245',
        cancelButtonColor: '#5865f2',
        confirmButtonText: 'ƒêƒÉng xu·∫•t',
        cancelButtonText: 'H·ªßy',
        background: '#1a1a1a',
        color: '#fff'
    }).then((result) => {
        if (result.isConfirmed) {
            localStorage.removeItem('discordAuth');
            
            document.getElementById('userInfo').style.display = 'none';
            document.getElementById('loginSection').style.display = 'block';
            
            // Trigger logout event
            window.dispatchEvent(new CustomEvent('userLoggedOut'));
            
            Swal.fire({
                title: 'ƒê√£ ƒëƒÉng xu·∫•t!',
                text: 'B·∫°n ƒë√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng',
                icon: 'success',
                timer: 2000,
                background: '#1a1a1a',
                color: '#fff',
                confirmButtonColor: '#5865f2'
            });
        }
    });
}

// Global functions ƒë·ªÉ c√°c file kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng
window.checkUserAuth = function() {
    const savedAuth = localStorage.getItem('discordAuth');
    if (savedAuth) {
        try {
            const authData = JSON.parse(savedAuth);
            const oneHour = 60 * 60 * 1000;
            
            if (Date.now() - authData.timestamp < oneHour) {
                return authData.user;
            }
        } catch (error) {
            console.error('Error checking auth:', error);
        }
    }
    return null;
};

window.requireAuth = function() {
    const user = window.checkUserAuth();
    if (!user) {
        Swal.fire({
            icon: 'warning',
            title: 'C·∫ßn ƒëƒÉng nh·∫≠p!',
            text: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y',
            background: '#1a1a1a',
            color: '#fff',
            confirmButtonColor: '#5865f2'
        });
        return false;
    }
    return true;
};
// Th√™m v√†o cu·ªëi script.js

function goHome() {
    Swal.fire({
        title: 'Quay v·ªÅ trang ch·ªß?',
        text: 'B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng v·ªÅ bio',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#00d4aa',
        cancelButtonColor: '#5865f2',
        confirmButtonText: 'ƒêi th√¥i!',
        cancelButtonText: '·ªû l·∫°i',
        background: '#1a1a1a',
        color: '#fff'
    }).then((result) => {
        if (result.isConfirmed) {
            // Chuy·ªÉn v·ªÅ trang ch·ªß - thay ƒë·ªïi URL n√†y theo trang ch·ªß c·ªßa b·∫°n
            window.location.href = '/'; // ho·∫∑c '/bio' ho·∫∑c trang ch·ªß c·ªßa b·∫°n
        }
    });
}

async function deleteAccount() {
    const user = window.checkUserAuth();
    if (!user) {
        showError('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n');
        return;
    }

    Swal.fire({
        title: '‚ö†Ô∏è X√≥a t√†i kho·∫£n?',
        html: `
            <p>B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n <strong>${user.username}</strong>?</p>
            <p style="color: #ff6b6b; margin-top: 10px;">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</p>
        `,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ed4245',
        cancelButtonColor: '#5865f2',
        confirmButtonText: 'X√≥a t√†i kho·∫£n',
        cancelButtonText: 'H·ªßy b·ªè',
        background: '#1a1a1a',
        color: '#fff',
        focusCancel: true
    }).then(async (result) => {
        if (result.isConfirmed) {
            try {
                const userIP = await getUserIP();
                
                const response = await fetch('/api/auth', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ 
                        userId: user.id,
                        ip: userIP 
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    // Clear local storage
                    localStorage.removeItem('discordAuth');
                    
                    // Show success and redirect to login
                    Swal.fire({
                        title: 'ƒê√£ x√≥a t√†i kho·∫£n! üóëÔ∏è',
                        text: 'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng',
                        icon: 'success',
                        background: '#1a1a1a',
                        color: '#fff',
                        confirmButtonColor: '#5865f2',
                        timer: 3000,
                        timerProgressBar: true
                    }).then(() => {
                        // Reset UI
                        document.getElementById('userInfo').style.display = 'none';
                        document.getElementById('loginSection').style.display = 'block';
                        
                        // Trigger logout event
                        window.dispatchEvent(new CustomEvent('userLoggedOut'));
                    });
                } else {
                    showError(data.message || 'Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n');
                }
                
            } catch (error) {
                console.error('Delete account error:', error);
                showError('L·ªói k·∫øt n·ªëi server');
            }
        }
    });
}

// Update logout function ƒë·ªÉ ph√π h·ª£p v·ªõi style m·ªõi
function logout() {
    Swal.fire({
        title: 'ƒêƒÉng xu·∫•t? üö™',
        text: 'B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t kh√¥ng?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#ffa726',
        cancelButtonColor: '#5865f2',
        confirmButtonText: 'ƒêƒÉng xu·∫•t',
        cancelButtonText: '·ªû l·∫°i',
        background: '#1a1a1a',
        color: '#fff'
    }).then((result) => {
        if (result.isConfirmed) {
            localStorage.removeItem('discordAuth');
            
            document.getElementById('userInfo').style.display = 'none';
            document.getElementById('loginSection').style.display = 'block';
            
            // Trigger logout event
            window.dispatchEvent(new CustomEvent('userLoggedOut'));
            
            Swal.fire({
                title: 'ƒê√£ ƒëƒÉng xu·∫•t! üëã',
                text: 'H·∫πn g·∫∑p l·∫°i b·∫°n!',
                icon: 'success',
                timer: 2000,
                background: '#1a1a1a',
                color: '#fff',
                confirmButtonColor: '#5865f2',
                timerProgressBar: true
            });
        }
    });
}