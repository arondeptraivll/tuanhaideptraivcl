// =====================================
// TOKEN MANAGER CLASS - V·ªöI SWEETALERT2
// =====================================

class TokenManager {
    constructor() {
        this.currentToken = null;
        this.timerInterval = null;
        this.userIP = null;
        this.API_BASE = '/api/bypass_funlink';
        this.isDownloadProcessing = false; // Prevent double click
        
        this.initializeElements();
        this.checkExistingTokenOnLoad();
        this.setupEventListeners();
        this.configureSweetAlert();
    }

    // C·∫•u h√¨nh SweetAlert2 theme
    configureSweetAlert() {
        // Custom theme cho SweetAlert2
        const style = document.createElement('style');
        style.textContent = `
            .swal2-popup {
                background: #111 !important;
                border: 2px solid #00ff88 !important;
                border-radius: 15px !important;
            }
            .swal2-title {
                color: #fff !important;
            }
            .swal2-content {
                color: #ccc !important;
            }
            .swal2-confirm {
                background: linear-gradient(45deg, #00ff88, #00ccff) !important;
                border: none !important;
                border-radius: 8px !important;
            }
            .swal2-cancel {
                background: #ff4757 !important;
                border: none !important;
                border-radius: 8px !important;
            }
            .swal2-loader {
                border-color: #00ff88 transparent #00ff88 transparent !important;
            }
        `;
        document.head.appendChild(style);
    }

    // Kh·ªüi t·∫°o c√°c elements DOM
    initializeElements() {
        this.elements = {
            ipDisplay: document.getElementById('ipDisplay'),
            initialView: document.getElementById('initialView'),
            tokenView: document.getElementById('tokenView'),
            loadingView: document.getElementById('loadingView'),
            createTokenBtn: document.getElementById('createTokenBtn'),
            tokenDisplay: document.getElementById('tokenDisplay'),
            timerDisplay: document.getElementById('timerDisplay'),
            copyTokenBtn: document.getElementById('copyTokenBtn')
        };
    }

    // Ki·ªÉm tra token c√≥ s·∫µn khi load trang
    async checkExistingTokenOnLoad() {
        try {
            const response = await fetch(this.API_BASE);
            
            if (!response.ok) {
                throw new Error('L·ªói k·∫øt n·ªëi');
            }
            
            const data = await response.json();
            
            // Hi·ªÉn th·ªã IP
            if (data.ip) {
                this.userIP = data.ip;
                this.elements.ipDisplay.textContent = this.userIP;
            } else {
                this.elements.ipDisplay.textContent = 'Kh√¥ng th·ªÉ l·∫•y IP';
                this.elements.ipDisplay.style.color = '#ff4757';
            }
            
            // Ki·ªÉm tra token c√≥ s·∫µn
            if (data.has_existing_token && data.token) {
                this.currentToken = data.token;
                this.elements.tokenDisplay.value = data.token;
                this.startTimer(data.time_left_ms);
                this.showTokenView();
                this.showNotification('ƒê√£ t·∫£i l·∫°i token c·ªßa b·∫°n.', 'info');
            } else {
                this.showInitialView();
            }
            
        } catch (error) {
            console.error('Error during initial load:', error);
            this.elements.ipDisplay.textContent = 'L·ªói k·∫øt n·ªëi';
            this.elements.ipDisplay.style.color = '#ff4757';
            this.showInitialView();
        }
    }

    // Setup event listeners
    setupEventListeners() {
        // N√∫t t·∫°o token
        this.elements.createTokenBtn.addEventListener('click', () => {
            this.createToken();
        });

        // N√∫t copy token v·ªõi SweetAlert
        this.elements.copyTokenBtn.addEventListener('click', () => {
            this.copyTokenWithAlert();
        });

        // N√∫t download v·ªõi SweetAlert SI√äU ƒê·∫∏P
        const downloadBtn = document.querySelector('#downloadTrigger');
        if (downloadBtn) {
            downloadBtn.addEventListener('click', async (e) => {
                e.preventDefault();
                
                // Prevent double click
                if (this.isDownloadProcessing) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Vui l√≤ng ƒë·ª£i!',
                        text: 'ƒêang x·ª≠ l√Ω y√™u c·∫ßu tr∆∞·ªõc ƒë√≥...',
                        timer: 2000,
                        showConfirmButton: false,
                        background: '#111',
                        color: '#fff'
                    });
                    return;
                }
                
                await this.createDownloadSessionWithAlert();
            });
        }
    }

    // Hi·ªÉn th·ªã view c·ª• th·ªÉ
    showView(viewName) {
        const views = ['initialView', 'tokenView', 'loadingView'];
        
        views.forEach(view => {
            if (this.elements[view]) {
                this.elements[view].classList.add('hidden');
            }
        });
        
        if (this.elements[viewName]) {
            this.elements[viewName].classList.remove('hidden');
        }
    }

    showInitialView() {
        this.showView('initialView');
        this.stopTimer();
    }

    showTokenView() {
        this.showView('tokenView');
    }

    showLoadingView() {
        this.showView('loadingView');
    }

    // T·∫°o token v·ªõi SweetAlert
    async createToken() {
        // Hi·ªán loading popup
        Swal.fire({
            title: 'ƒêang t·∫°o token...',
            text: 'Vui l√≤ng ch·ªù trong gi√¢y l√°t',
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            background: '#111',
            color: '#fff',
            didOpen: () => {
                Swal.showLoading();
            }
        });
        
        try {
            const response = await fetch(this.API_BASE, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'create_token'
                })
            });
            
            const data = await response.json();
            
            if (response.status === 201 && data.success) {
                this.currentToken = data.token;
                this.elements.tokenDisplay.value = data.token;
                this.startTimer(data.time_left_ms);
                
                // Success popup v·ªõi tick xanh
                await Swal.fire({
                    icon: 'success',
                    title: 'Th√†nh c√¥ng!',
                    text: 'Token ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!',
                    timer: 2000,
                    showConfirmButton: false,
                    background: '#111',
                    color: '#fff'
                });
                
                this.showTokenView();
                return;
            }
            
            throw new Error(data.error || 'Kh√¥ng th·ªÉ t·∫°o token');
            
        } catch (error) {
            console.error('Error creating token:', error);
            
            // Error popup v·ªõi cross ƒë·ªè
            await Swal.fire({
                icon: 'error',
                title: 'L·ªói!',
                text: error.message || 'L·ªói k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.',
                background: '#111',
                color: '#fff'
            });
            
            this.showInitialView();
        }
    }

    // T·∫†O DOWNLOAD SESSION V·ªöI SWEETALERT SI√äU ƒê·∫∏P
    async createDownloadSessionWithAlert() {
        this.isDownloadProcessing = true;
        
        // Hi·ªán loading popup si√™u ƒë·∫πp
        Swal.fire({
            title: 'üöÄ ƒêang t·∫°o phi√™n t·∫£i xu·ªëng...',
            html: `
                <div style="margin: 20px 0;">
                    <div style="color: #00ff88; font-weight: bold; margin-bottom: 10px;">
                        ‚è≥ Vui l√≤ng ƒë·ª£i...
                    </div>
                    <div style="color: #ccc; font-size: 0.9em;">
                        ƒêang k·∫øt n·ªëi ƒë·∫øn h·ªá th·ªëng b·∫£o m·∫≠t
                    </div>
                </div>
            `,
            allowOutsideClick: false,
            allowEscapeKey: false,
            showConfirmButton: false,
            background: '#111',
            color: '#fff',
            didOpen: () => {
                Swal.showLoading();
            }
        });
        
        try {
            const response = await fetch(this.API_BASE, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    action: 'create_download_session'
                })
            });
            
            const data = await response.json();
            
            if (response.status === 201 && data.success) {
                // Success popup v·ªõi animation tick xanh SI√äU ƒê·∫∏P
                await Swal.fire({
                    icon: 'success',
                    title: '‚úÖ Phi√™n t·∫£i ƒë√£ ƒë∆∞·ª£c t·∫°o!',
                    html: `
                        <div style="margin: 20px 0;">
                            <div style="color: #00ff88; font-weight: bold; margin-bottom: 15px;">
                                üéâ Th√†nh c√¥ng! ƒêang chuy·ªÉn h∆∞·ªõng...
                            </div>
                            <div style="background: rgba(0,255,136,0.1); padding: 15px; border-radius: 8px; border-left: 4px solid #00ff88;">
                                <div style="color: #fff; margin-bottom: 8px;">
                                    ‚ö†Ô∏è <strong>L∆∞u √Ω quan tr·ªçng:</strong>
                                </div>
                                <div style="color: #ccc; font-size: 0.9em;">
                                    Vui l√≤ng kh√¥ng d√πng bypass n·∫øu ko mu·ªën b·ªã ch·∫∑n!
                                </div>
                            </div>
                        </div>
                    `,
                    timer: 3000,
                    timerProgressBar: true,
                    showConfirmButton: false,
                    background: '#111',
                    color: '#fff',
                    didOpen: () => {
                        // Custom animation
                        const popup = Swal.getPopup();
                        popup.style.animation = 'pulse 0.5s ease-in-out';
                    }
                });
                
                // LINK M·ªöI
                const link4mUrl = 'https://link4m.com/n902L';
                
                // M·ªü tab m·ªõi
                window.open(link4mUrl, '_blank');
                
                // Th√¥ng b√°o cu·ªëi
                setTimeout(() => {
                    Swal.fire({
                        icon: 'info',
                        title: 'üìã H∆∞·ªõng d·∫´n',
                        html: `
                            <div style="text-align: left; color: #ccc;">
                                <p style="margin-bottom: 10px;">‚úÖ Tab m·ªõi ƒë√£ ƒë∆∞·ª£c m·ªü</p>
                                <p style="margin-bottom: 10px;">‚è±Ô∏è Ho√†n th√†nh link r√∫t g·ªçn trong 10 ph√∫t</p>
                                <p style="color: #ff8800;"><strong>üö´ Kh√¥ng s·ª≠ d·ª•ng bypass!</strong></p>
                            </div>
                        `,
                        confirmButtonText: 'ƒê√£ hi·ªÉu',
                        background: '#111',
                        color: '#fff'
                    });
                }, 1000);
                
                this.isDownloadProcessing = false;
                return;
            }
            
            throw new Error(data.error || 'Kh√¥ng th·ªÉ t·∫°o phi√™n t·∫£i xu·ªëng');
            
        } catch (error) {
            console.error('Error creating download session:', error);
            
            // Error popup v·ªõi cross ƒë·ªè
            await Swal.fire({
                icon: 'error',
                title: '‚ùå C√≥ l·ªói x·∫£y ra!',
                html: `
                    <div style="color: #ff4757; margin: 15px 0;">
                        <strong>Chi ti·∫øt l·ªói:</strong><br>
                        ${error.message}
                    </div>
                    <div style="background: rgba(255,71,87,0.1); padding: 15px; border-radius: 8px; border-left: 4px solid #ff4757;">
                        <div style="color: #ccc; font-size: 0.9em;">
                            Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£
                        </div>
                    </div>
                `,
                confirmButtonText: 'Th·ª≠ l·∫°i',
                background: '#111',
                color: '#fff'
            });
            
            this.isDownloadProcessing = false;
        }
    }

    // Copy token v·ªõi SweetAlert
    async copyTokenWithAlert() {
        try {
            await navigator.clipboard.writeText(this.currentToken);
            
            // Success animation
            const originalContent = this.elements.copyTokenBtn.innerHTML;
            this.elements.copyTokenBtn.innerHTML = '<i class="fas fa-check"></i>';
            this.elements.copyTokenBtn.style.background = 'rgba(0, 255, 136, 0.5)';
            this.elements.copyTokenBtn.style.transform = 'scale(1.1)';
            
            // SweetAlert toast notification
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Token ƒë√£ ƒë∆∞·ª£c copy!',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
                background: '#111',
                color: '#fff'
            });
            
            setTimeout(() => {
                this.elements.copyTokenBtn.innerHTML = originalContent;
                this.elements.copyTokenBtn.style.background = '';
                this.elements.copyTokenBtn.style.transform = '';
            }, 1500);
            
        } catch (error) {
            console.error('Error copying token:', error);
            
            // Fallback method
            this.elements.tokenDisplay.select();
            this.elements.tokenDisplay.setSelectionRange(0, 99999);
            
            try {
                document.execCommand('copy');
                
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: 'Token ƒë√£ ƒë∆∞·ª£c copy!',
                    showConfirmButton: false,
                    timer: 2000,
                    background: '#111',
                    color: '#fff'
                });
            } catch (fallbackError) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'error',
                    title: 'Kh√¥ng th·ªÉ copy token',
                    text: 'Vui l√≤ng copy th·ªß c√¥ng',
                    showConfirmButton: false,
                    timer: 3000,
                    background: '#111',
                    color: '#fff'
                });
            }
        }
    }

    // C√°c method kh√°c gi·ªØ nguy√™n...
    startTimer(timeLeftMs) {
        this.stopTimer();
        
        let secondsLeft = Math.floor(timeLeftMs / 1000);
        
        const updateTimer = () => {
            if (secondsLeft <= 0) {
                this.elements.timerDisplay.textContent = '00:00:00';
                
                // Token expired alert
                Swal.fire({
                    icon: 'warning',
                    title: '‚è∞ Token ƒë√£ h·∫øt h·∫°n!',
                    text: 'Vui l√≤ng t·∫°o token m·ªõi ƒë·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng.',
                    confirmButtonText: 'T·∫°o m·ªõi',
                    background: '#111',
                    color: '#fff'
                }).then(() => {
                    this.showInitialView();
                });
                
                this.stopTimer();
                return;
            }
            
            const hours = Math.floor(secondsLeft / 3600);
            const minutes = Math.floor((secondsLeft % 3600) / 60);
            const seconds = secondsLeft % 60;
            
            this.elements.timerDisplay.textContent = 
                hours.toString().padStart(2, '0') + ':' +
                minutes.toString().padStart(2, '0') + ':' +
                seconds.toString().padStart(2, '0');
            
            if (secondsLeft <= 300) {
                this.elements.timerDisplay.style.animation = 'pulse 1s ease-in-out infinite';
                this.elements.timerDisplay.style.color = '#ff4757';
            }
            
            secondsLeft--;
        };
        
        updateTimer();
        this.timerInterval = setInterval(updateTimer, 1000);
    }

    stopTimer() {
        if (this.timerInterval) {
            clearInterval(this.timerInterval);
            this.timerInterval = null;
        }
        
        if (this.elements.timerDisplay) {
            this.elements.timerDisplay.style.animation = '';
            this.elements.timerDisplay.style.color = '#ff8800';
        }
    }

    // Fallback notification (backup)
    showNotification(message, type = 'info') {
        const colors = {
            'success': 'success',
            'error': 'error',
            'warning': 'warning',
            'info': 'info'
        };
        
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: colors[type] || 'info',
            title: message,
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            background: '#111',
            color: '#fff'
        });
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new TokenManager();
    
    console.log('üöÄ Token Manager v·ªõi SweetAlert2 ƒë√£ kh·ªüi ƒë·ªông!');
    console.log('üîí H·ªá th·ªëng ch·ªëng bypass ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t!');
});